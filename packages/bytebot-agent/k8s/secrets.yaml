# Kubernetes Secrets - Bytebot Agent Sensitive Configuration  
# Contains sensitive configuration data that must be encrypted and protected
# Use 'kubectl apply' with proper RBAC permissions to deploy

apiVersion: v1
kind: Secret
metadata:
  name: bytebot-agent-secrets
  namespace: bytebot-production
  labels:
    app: bytebot-agent
    component: secrets
    version: "1.0.0"
    environment: production
type: Opaque
data:
  # Database URL (Base64 encoded)
  # Example: postgresql://user:password@postgres:5432/bytebotdb
  DATABASE_URL: <BASE64_ENCODED_DATABASE_URL>

  # JWT Secret (Base64 encoded, minimum 64 characters for production)
  # Generate with: openssl rand -hex 32 | base64
  JWT_SECRET: <BASE64_ENCODED_JWT_SECRET>

  # Encryption Key (Base64 encoded, minimum 64 characters for production)  
  # Generate with: openssl rand -hex 32 | base64
  ENCRYPTION_KEY: <BASE64_ENCODED_ENCRYPTION_KEY>

  # LLM API Keys (Base64 encoded)
  ANTHROPIC_API_KEY: <BASE64_ENCODED_ANTHROPIC_KEY>
  OPENAI_API_KEY: <BASE64_ENCODED_OPENAI_KEY>
  GEMINI_API_KEY: <BASE64_ENCODED_GEMINI_KEY>

---
# Staging Secrets
apiVersion: v1
kind: Secret
metadata:
  name: bytebot-agent-secrets
  namespace: bytebot-staging
  labels:
    app: bytebot-agent
    component: secrets
    version: "1.0.0"
    environment: staging
type: Opaque
data:
  # Database URL (Base64 encoded)
  DATABASE_URL: <BASE64_ENCODED_STAGING_DATABASE_URL>

  # JWT Secret (Base64 encoded)
  JWT_SECRET: <BASE64_ENCODED_STAGING_JWT_SECRET>

  # Encryption Key (Base64 encoded)
  ENCRYPTION_KEY: <BASE64_ENCODED_STAGING_ENCRYPTION_KEY>

  # LLM API Keys (Base64 encoded) - Can use same as production or separate
  ANTHROPIC_API_KEY: <BASE64_ENCODED_ANTHROPIC_KEY>
  OPENAI_API_KEY: <BASE64_ENCODED_OPENAI_KEY>
  GEMINI_API_KEY: <BASE64_ENCODED_GEMINI_KEY>

---
# Secret Generator Job (Optional)
# Generates secure secrets if they don't exist
apiVersion: batch/v1
kind: Job
metadata:
  name: bytebot-secret-generator
  namespace: bytebot-production
  labels:
    app: bytebot-agent
    component: secret-generator
    version: "1.0.0"
spec:
  template:
    metadata:
      labels:
        app: bytebot-agent
        component: secret-generator
    spec:
      restartPolicy: OnFailure
      containers:
      - name: secret-generator
        image: alpine/openssl:latest
        command:
        - /bin/sh
        - -c
        - |
          # Check if secrets already exist
          if kubectl get secret bytebot-agent-secrets -n bytebot-production; then
            echo "Secrets already exist, skipping generation"
            exit 0
          fi
          
          echo "Generating secure secrets..."
          
          # Generate JWT secret (64 chars)
          JWT_SECRET=$(openssl rand -hex 32)
          JWT_SECRET_B64=$(echo -n "$JWT_SECRET" | base64 -w 0)
          
          # Generate encryption key (64 chars)  
          ENCRYPTION_KEY=$(openssl rand -hex 32)
          ENCRYPTION_KEY_B64=$(echo -n "$ENCRYPTION_KEY" | base64 -w 0)
          
          # Create secret manifest
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Secret
          metadata:
            name: bytebot-agent-secrets-generated
            namespace: bytebot-production
            labels:
              app: bytebot-agent
              component: secrets
              generated: "true"
          type: Opaque
          data:
            JWT_SECRET: $JWT_SECRET_B64
            ENCRYPTION_KEY: $ENCRYPTION_KEY_B64
          EOF
          
          echo "Generated secrets successfully"
          echo "NOTE: You still need to manually add DATABASE_URL and LLM API keys"
        env:
        - name: KUBECTL_VERSION
          value: "v1.28.0"
        volumeMounts:
        - name: kubectl-config
          mountPath: /root/.kube
          readOnly: true
      volumes:
      - name: kubectl-config
        secret:
          secretName: kubectl-config
      serviceAccountName: secret-generator