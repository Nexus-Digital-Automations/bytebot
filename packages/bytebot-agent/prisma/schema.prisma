// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TaskStatus {
  PENDING
  RUNNING
  NEEDS_HELP
  NEEDS_REVIEW
  COMPLETED
  CANCELLED
  FAILED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MessageRole {
  USER
  ASSISTANT
}

enum UserRole {
  ADMIN
  OPERATOR
  VIEWER
}

enum Permission {
  TASK_READ
  TASK_WRITE
  TASK_DELETE
  COMPUTER_CONTROL
  SYSTEM_ADMIN
  USER_MANAGEMENT
}

enum TaskType {
  IMMEDIATE
  SCHEDULED
}

model Task {
  id            String        @id @default(uuid())
  description   String
  type          TaskType      @default(IMMEDIATE)
  status        TaskStatus    @default(PENDING)
  priority      TaskPriority  @default(MEDIUM)
  control       MessageRole   @default(ASSISTANT)
  createdAt     DateTime      @default(now())
  createdBy     MessageRole   @default(USER)
  userId        String?       // Optional foreign key to User
  scheduledFor  DateTime?
  updatedAt     DateTime      @updatedAt
  executedAt    DateTime?
  completedAt   DateTime?
  queuedAt      DateTime?
  error         String?
  result        Json?
  // Example: 
  // { "provider": "anthropic", "name": "claude-opus-4-20250514", "title": "Claude Opus 4" }
  model         Json
  messages      Message[]
  summaries     Summary[]
  files         File[]
  user          User?         @relation(fields: [userId], references: [id])
}

model Summary {
  id             String     @id @default(uuid())
  content        String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  messages       Message[]  // One-to-many relationship: one Summary has many Messages

  task      Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  
  // Self-referential relationship
  parentSummary  Summary?   @relation("SummaryHierarchy", fields: [parentId], references: [id])
  parentId       String?
  childSummaries Summary[]  @relation("SummaryHierarchy")
}

model Message {
  id        String      @id @default(uuid())
  // Content field follows Anthropic's content blocks structure
  // Example: 
  // [
  //   {"type": "text", "text": "Hello world"},
  //   {"type": "image", "source": {"type": "base64", "media_type": "image/jpeg", "data": "..."}}
  // ]
  content   Json
  role      MessageRole @default(ASSISTANT)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  task      Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  summary   Summary?    @relation(fields: [summaryId], references: [id])
  summaryId String?     // Optional foreign key to Summary
}

model File {
  id            String      @id @default(uuid())
  name          String
  type          String      // MIME type
  size          Int         // Size in bytes
  data          String      // Base64 encoded file data
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  task          Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId        String
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  username      String         @unique
  firstName     String?
  lastName      String?
  passwordHash  String
  role          UserRole       @default(VIEWER)
  isActive      Boolean        @default(true)
  emailVerified Boolean        @default(false)
  lastLoginAt   DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Relations
  tasks         Task[]
  sessions      UserSession[]
  permissions   RolePermission[]
  
  @@map("users")
}

model UserSession {
  id            String       @id @default(uuid())
  userId        String
  refreshToken  String       @unique
  isRevoked     Boolean      @default(false)
  expiresAt     DateTime
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  ipAddress     String?
  userAgent     String?
  
  // Relations
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_sessions")
}

model RolePermission {
  id         String      @id @default(uuid())
  userId     String
  role       UserRole
  permission Permission
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  
  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, role, permission])
  @@map("role_permissions")
}

