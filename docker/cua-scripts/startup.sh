#!/bin/bash

# ==========================================
# C/ua Framework Startup Script
# ==========================================
# Initializes C/ua framework components and hybrid architecture
# Handles: ANE Bridge Setup, Performance Monitoring, Service Orchestration

set -euo pipefail

# === Configuration ===
LOG_FILE="/opt/cua/logs/startup.log"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
CONFIG_FILE="/opt/cua/config/agent-config.json"
STARTUP_TIMEOUT=120  # seconds

# === Logging Function ===
log_message() {
    local level="$1"
    local message="$2"
    echo "[${TIMESTAMP}] [${level}] $message" | tee -a "$LOG_FILE"
}

# === Startup Functions ===

initialize_cua_environment() {
    log_message "INFO" "Initializing C/ua Framework environment"
    
    # Create necessary directories\n    mkdir -p /opt/cua/{logs,shared,cache,tmp}\n    mkdir -p /opt/ane-bridge/{logs,cache}\n    mkdir -p /opt/monitoring/{logs,metrics}\n    \n    # Set permissions\n    chmod 755 /opt/cua/{logs,shared,cache,tmp}\n    chmod 755 /opt/ane-bridge/{logs,cache}\n    chmod 755 /opt/monitoring/{logs,metrics}\n    \n    # Initialize shared communication file\n    echo \"{\\\"status\\\": \\\"initializing\\\", \\\"timestamp\\\": \\\"${TIMESTAMP}\\\"}\" > /opt/cua/shared/status.json\n    \n    log_message \"INFO\" \"✓ C/ua environment initialized\"\n}\n\nvalidate_configuration() {\n    log_message \"INFO\" \"Validating C/ua configuration\"\n    \n    if [ ! -f \"$CONFIG_FILE\" ]; then\n        log_message \"ERROR\" \"Configuration file not found: $CONFIG_FILE\"\n        return 1\n    fi\n    \n    # Validate JSON configuration\n    if ! jq . \"$CONFIG_FILE\" > /dev/null 2>&1; then\n        log_message \"ERROR\" \"Invalid JSON in configuration file\"\n        return 1\n    fi\n    \n    # Check required configuration sections\n    local required_sections=(\"cua_framework\" \"apple_neural_engine\" \"computer_interface\")\n    for section in \"${required_sections[@]}\"; do\n        if ! jq -e \".${section}\" \"$CONFIG_FILE\" > /dev/null 2>&1; then\n            log_message \"ERROR\" \"Missing required configuration section: $section\"\n            return 1\n        fi\n    done\n    \n    log_message \"INFO\" \"✓ Configuration validation passed\"\n    return 0\n}\n\nsetup_ane_bridge_communication() {\n    log_message \"INFO\" \"Setting up Apple Neural Engine bridge communication\"\n    \n    local ane_enabled\n    ane_enabled=$(jq -r '.apple_neural_engine.enabled' \"$CONFIG_FILE\")\n    \n    if [ \"$ane_enabled\" = \"true\" ]; then\n        local bridge_url\n        bridge_url=$(jq -r '.apple_neural_engine.bridge_url' \"$CONFIG_FILE\")\n        \n        log_message \"INFO\" \"ANE Bridge enabled, testing connectivity to $bridge_url\"\n        \n        # Wait for ANE bridge to be available (with timeout)\n        local attempts=0\n        local max_attempts=30\n        \n        while [ $attempts -lt $max_attempts ]; do\n            if curl -s --max-time 3 \"${bridge_url}/health\" > /dev/null 2>&1; then\n                log_message \"INFO\" \"✓ ANE Bridge connectivity established\"\n                echo \"{\\\"ane_bridge_status\\\": \\\"connected\\\", \\\"url\\\": \\\"${bridge_url}\\\"}\" > /opt/cua/shared/ane_status.json\n                return 0\n            fi\n            \n            attempts=$((attempts + 1))\n            log_message \"INFO\" \"ANE Bridge not ready, attempt $attempts/$max_attempts\"\n            sleep 2\n        done\n        \n        log_message \"WARN\" \"ANE Bridge not available, enabling fallback mode\"\n        echo \"{\\\"ane_bridge_status\\\": \\\"fallback\\\", \\\"reason\\\": \\\"connection_timeout\\\"}\" > /opt/cua/shared/ane_status.json\n    else\n        log_message \"INFO\" \"ANE Bridge disabled in configuration\"\n        echo \"{\\\"ane_bridge_status\\\": \\\"disabled\\\"}\" > /opt/cua/shared/ane_status.json\n    fi\n    \n    return 0\n}\n\nstart_cua_agent_api() {\n    log_message \"INFO\" \"Starting C/ua Agent API server\"\n    \n    # Start the C/ua Agent API in the background\n    nohup python3 -m uvicorn cua_agent.main:app --host 0.0.0.0 --port 9993 --workers 4 \\\n        --log-level info --access-log > /opt/cua/logs/agent-api.log 2>&1 &\n    \n    local api_pid=$!\n    echo $api_pid > /opt/cua/tmp/agent-api.pid\n    \n    # Wait for API to be ready\n    local attempts=0\n    local max_attempts=30\n    \n    while [ $attempts -lt $max_attempts ]; do\n        if curl -s --max-time 2 \"http://localhost:9993/api/v1/health\" > /dev/null 2>&1; then\n            log_message \"INFO\" \"✓ C/ua Agent API is ready (PID: $api_pid)\"\n            return 0\n        fi\n        \n        attempts=$((attempts + 1))\n        sleep 1\n    done\n    \n    log_message \"ERROR\" \"C/ua Agent API failed to start\"\n    return 1\n}\n\nstart_performance_monitoring() {\n    local monitoring_enabled\n    monitoring_enabled=$(jq -r '.performance.monitoring_enabled' \"$CONFIG_FILE\")\n    \n    if [ \"$monitoring_enabled\" = \"true\" ]; then\n        log_message \"INFO\" \"Starting performance monitoring\"\n        \n        # Start performance monitor in the background\n        nohup python3 /opt/monitoring/scripts/performance_monitor.py \\\n            --config \"$CONFIG_FILE\" \\\n            --log-file /opt/monitoring/logs/monitor.log \\\n            --port 9995 > /opt/monitoring/logs/monitor-startup.log 2>&1 &\n        \n        local monitor_pid=$!\n        echo $monitor_pid > /opt/cua/tmp/monitor.pid\n        \n        log_message \"INFO\" \"✓ Performance monitoring started (PID: $monitor_pid)\"\n    else\n        log_message \"INFO\" \"Performance monitoring disabled\"\n    fi\n    \n    return 0\n}\n\nsetup_websocket_communication() {\n    log_message \"INFO\" \"Setting up WebSocket communication\"\n    \n    # Start WebSocket server for real-time communication\n    nohup python3 /opt/cua/scripts/websocket_server.py \\\n        --host 0.0.0.0 \\\n        --port 9996 \\\n        --config \"$CONFIG_FILE\" > /opt/cua/logs/websocket.log 2>&1 &\n    \n    local ws_pid=$!\n    echo $ws_pid > /opt/cua/tmp/websocket.pid\n    \n    log_message \"INFO\" \"✓ WebSocket server started (PID: $ws_pid)\"\n    return 0\n}\n\nupdate_system_status() {\n    log_message \"INFO\" \"Updating system status\"\n    \n    # Create comprehensive status file\n    cat > /opt/cua/shared/system_status.json << EOF\n{\n  \"timestamp\": \"${TIMESTAMP}\",\n  \"container_id\": \"${CUA_CONTAINER_ID:-bytebot-desktop-cua}\",\n  \"framework_version\": \"${CUA_VERSION:-1.0.0}\",\n  \"status\": \"ready\",\n  \"services\": {\n    \"cua_agent_api\": {\n      \"status\": \"running\",\n      \"port\": 9993,\n      \"health_endpoint\": \"/api/v1/health\"\n    },\n    \"performance_monitor\": {\n      \"status\": \"$([ '${PERFORMANCE_MONITORING:-disabled}' = 'enabled' ] && echo 'running' || echo 'disabled')\",\n      \"port\": 9995\n    },\n    \"websocket_server\": {\n      \"status\": \"running\",\n      \"port\": 9996\n    }\n  },\n  \"ane_bridge\": {\n    \"enabled\": \"$(jq -r '.apple_neural_engine.enabled' \"$CONFIG_FILE\")\",\n    \"url\": \"$(jq -r '.apple_neural_engine.bridge_url' \"$CONFIG_FILE\")\"\n  },\n  \"capabilities\": $(jq '.cua_framework.capabilities' \"$CONFIG_FILE\"),\n  \"performance_mode\": \"${CUA_PERFORMANCE_MODE:-standard}\"\n}\nEOF\n    \n    log_message \"INFO\" \"✓ System status updated\"\n}\n\nstart_original_services() {\n    log_message \"INFO\" \"Starting original Bytebot services via supervisor\"\n    \n    # Start supervisord with C/ua configuration\n    exec /usr/bin/supervisord -c /etc/supervisor/conf.d/cua-supervisord.conf -n &\n    \n    local supervisor_pid=$!\n    log_message \"INFO\" \"✓ Supervisor started (PID: $supervisor_pid)\"\n    \n    return 0\n}\n\n# === Error Handling ===\nhandle_startup_error() {\n    local error_message=\"$1\"\n    log_message \"ERROR\" \"Startup failed: $error_message\"\n    \n    # Update status to failed\n    echo \"{\\\"status\\\": \\\"failed\\\", \\\"error\\\": \\\"${error_message}\\\", \\\"timestamp\\\": \\\"${TIMESTAMP}\\\"}\" > /opt/cua/shared/status.json\n    \n    # Attempt graceful cleanup\n    cleanup_on_error\n    \n    exit 1\n}\n\ncleanup_on_error() {\n    log_message \"INFO\" \"Performing cleanup on error\"\n    \n    # Kill started processes\n    for pid_file in /opt/cua/tmp/*.pid; do\n        if [ -f \"$pid_file\" ]; then\n            local pid\n            pid=$(cat \"$pid_file\")\n            if kill -0 \"$pid\" 2>/dev/null; then\n                kill \"$pid\" || true\n            fi\n            rm -f \"$pid_file\"\n        fi\n    done\n}\n\n# === Signal Handling ===\ntrap 'handle_startup_error \"Interrupted by signal\"' INT TERM\ntrap 'handle_startup_error \"Unexpected error occurred\"' ERR\n\n# === Main Startup Execution ===\n\nmain() {\n    log_message \"INFO\" \"=== Starting C/ua Framework Integration ===\"\n    \n    # Create logs directory\n    mkdir -p \"$(dirname \"$LOG_FILE\")\"\n    \n    # Execute startup sequence\n    initialize_cua_environment\n    validate_configuration\n    setup_ane_bridge_communication\n    start_cua_agent_api\n    start_performance_monitoring  \n    setup_websocket_communication\n    update_system_status\n    \n    log_message \"INFO\" \"=== C/ua Framework startup completed successfully ===\"\n    log_message \"INFO\" \"Starting original Bytebot services...\"\n    \n    # Start original services (this will become the main process)\n    start_original_services\n}\n\n# Execute main function\nmain \"$@\""